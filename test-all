#!/bin/bash

# Magic to get where this script lives
HERE=$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/)


# 3-finger claw
shout() { echo "$0: $*" >&2; }  # Just echo an error and the program name
barf() { shout "$*"; exit 111; }
safe() { "$@" || barf "cannot $*"; }

safe cd "$HERE"

deactivate 2> /dev/null

source bin/activate || barf "No virtualenv in $HERE??"

verify_executables() {
    MISSING=0
    for executable in "$@"; do
        which $executable > /dev/null
        if [ $? -ne 0 ]; then
            shout "Could not find: $executable"
            MISSING=$(($MISSING + 1))
        fi
    done
    if [ $MISSING -gt 0 ]; then
        barf "Install missing dependencies above"
    fi
}

verify_executables mypy coverage dart

echo Type check...
mypy -p lox
STATUS=$?

mypy lox.py
STATUS=$(($? + $STATUS))

echo Python tests...
coverage run -m unittest -v python_tests/test*py
STATUS=$(($? + $STATUS))
echo
echo Coverage report...
coverage report -m
echo
echo Dart tests...
# Hack: retrofit custom output to make the ch4 tests happy

echo "Chapter 4..."
dart test/test.dart chap04_scanning --interpreter ./lox_ch4.py
STATUS=$(($? + $STATUS))
echo "Chapter 6..."
dart test/test.dart chap06_parsing --interpreter ./lox_ch6.py
STATUS=$(($? + $STATUS))
echo "Chapter 7..."
dart test/test.dart chap07_evaluating --interpreter ./lox.py
STATUS=$(($? + $STATUS))

if [ "$STATUS" -ne "0" ]; then
    shout "One or more steps reported failure."
fi
exit $STATUS
